

//importing the required libraries

import java.text.DecimalFormat;
import java.util.*;

//creating class movie to describe attributes of each movie object
class Movie {
	String title;
	String director;
	int duration;
	String[] actors;
	String[] roles;
	double rating;
	String genre;

//constructor assigning the respective attributes 
	Movie(String title, String director, int duration, String[] actors, String[] roles, double rating, String genre) {
		this.title = title;
		this.director = director;
		this.duration = duration;
		this.actors = actors;
		this.roles = roles;
		this.rating = rating;
		this.genre = genre;
	}

//displaying the thorough details of movies
	public void displayMovieDetails() {
	    int boxWidth = 60; // Width of the box
	    int boxHeight = 11; // Height of the box

	    // Print the top border of the box
	    for (int i = 0; i < boxWidth; i++) {
	        System.out.print("*");
	    }
	    System.out.println(); // Move to the next line

	    // Print the movie details inside the box
	    System.out.println("* Movie: " + title);
	    System.out.println("* Directed by: " + director);
	    System.out.println("* Duration: " + (duration / 60) + "hrs " + (duration % 60) + " mins");
	    System.out.print("* Actors and Roles: ");
	    for (int i = 0; i < actors.length; i++) {
	        System.out.print(actors[i] + " as " + roles[i] + "\n*\t");
	        if (i < actors.length - 1) {
	            System.out.print(", ");
	        }
	    }
	    System.out.println();
	    System.out.println("* Rating: " + rating);
	    System.out.println("* Genre: " + genre);

	    // Print the bottom border of the box
	    for (int i = 0; i < boxWidth; i++) {
	        System.out.print("*");
	    }
	    System.out.println(); // Move to the next line
	}

	}

//class theater to describe attributes of each theater object
class Theatres{
	String name;
	String [][] data = new String[4][5];

//constructor assigning the respective attributes 
	Theatres(String name, String [][] data){
		this.name=name;
		for(int i = 0; i < 4; i++)
			this.data[i] = data[i];
	}

//class theater to describe attributes of each theater object
	void displayTheatreMDetails(int index){
		String [] dataOnThatDay = data[index];
		System.out.println("\nMovie Screenings on " + dataOnThatDay[0] + " in " + name + " are:");

		for(int i = 1; i < 5 ; ++i) {
			System.out.println(i + "] " + dataOnThatDay[i]);
		}

	}
}

//defining main class
public class Main {

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);

//initialising required variables and data
		int movieChoice=0;
	  	int rerunChoice=1;
		int slotChoice=0;
		int theatreChoice = 0;
		int dateChoice=0;
		String [][][] bigData = 
			{
					{
						{"16.4.24", "Harry Potter and the Philosopher's Stone", "Dilwale Dulhania Le Jayenge", "1920 London", "Kong: Skull Island"},

						{"17.4.24", "Twilight", "Harry Potter and the Philosopher's Stone", "Kong: Skull Island", "The Matrix"},

						{"18.4.24", "The Matrix", "Joker", "Kong: Skull Island", "Bahubali: The Beginning"},

						{"19.4.24", "Tenet", "Godzilla", "Bahubali: The Beginning", "1920 London"}
					},

					{
						{"16.4.24", "Tenet", "Joker", "Bahubali: The Beginning", "The Matrix"},

						{"17.4.24", "1920 London", "Dilwale Dulhania Le Jayenge", "Bahubali: The Beginning", "The Matrix"},

						{"18.4.24", "Dilwale Dulhania Le Jayenge", "Tenet", "Harry Potter and the Philosopher's Stone", "Joker"},

						{"19.4.24", "The Matrix", "Dilwale Dulhania Le Jayenge", "Bahubali: The Beginning", "Kong: Skull Island"},

					},

					{
						{"16.4.24", "The Matrix", "Joker", "Bahubali: The Beginning", "Tenet"},

						{"17.4.24",  "Tenet", "Dune", "1920 London", "Dilwale Dulhania Le Jayenge"},

						{"18.4.24", "The Matrix", "Godzilla", "Bahubali: The Beginning", "Kong: Skull Island"},

						{"19.4.24", "Dune", "Bahubali: The Beginning", "Joker", "Tenet"},
				
					},

					{
						{"16.4.24", "The Matrix", "Dilwale Dulhania Le Jayenge", "Harry Potter and the Philosopher's Stone", "Twilight"},

						{"17.4.24" ,"Tenet", "Dilwale Dulhania Le Jayenge", "The Matrix", "1920 London"},

						{"18.4.24", "Tenet", "Twilight", "Dilwale Dulhania Le Jayenge", "Joker"},

						{"19.4.24", "Bahubali: The Beginning", "Godzilla", "Twilight", "Kong: Skull Island"}
					}

			};
		
		String [] Slots = {"9:00am to 12:00pm","12:30pm to 3:30pm","4:00pm to 7:00pm","8:00pm to 11:00pm"};

		String theatreNames [] = {"INOX", "Mukta Theatres", "City Pride", "AURUM"};

		String movieNames [] = {"Harry Potter and the Philosopher's Stone","Dilwale Dulhania Le Jayenge","1920 London",
	"Kong: Skull Island","Twilight","The Matrix","Bahubali: The Beginning","Joker","Tenet","Godzilla","Dune"};

//creating objects for movie class
		 Movie[] movies = {
          new Movie("Harry Potter and the Philosopher's Stone", "Chris Columbus", 200,
              new String[]{"Daniel Radcliffe", "Rupert Grint", "Emma Watson","Alan Rickman"," Maggie Smith"},
              new String[]{"Harry Potter", "Ron Weasley", "Hermione Granger"," Severus Snape ","Minerva McGonagall "},
              9.0, " Fantasy, Adventure"),
          new Movie("Dilwale Dulhania Le Jayenge", "Aditya Chopra", 250,
              new String[]{"Shah Rukh Khan ", "Kajol", "Amrish Puri","Farida Jalal ","Anupam Kher "},
              new String[]{"Raj Malhotra", "Simran Singh", "Chaudhry Baldev Singh"," Lajwanti Lajjo Singh","Dharamvir Malhotra "},
              9.4, " Romance, Drama"),
          new Movie("1920 London", "Tinu Suresh Desai", 224,
              new String[]{"Sharman Joshi ", "Meera Chopra", "Vishal Karwal","Sushmita Mukherjee ","Surendra Pal ","Gajendra Chauhan "},
              new String[]{"Jai Singh Gujjar", "Shivangi", "Veer Singh","Kesar Maasi"," Tantrik ","Rajasaab "},
              8.1, "Horror, Mystery"),
          new Movie("Kong: Skull Island", "Jordan Vogt-Roberts", 165,
              new String[]{"Tom Hiddleston", "Samuel L. Jackson", "Brie Larson","John C. Reilly "," John Goodman "," Corey Hawkins"},
              new String[]{"James Conrad", "Preston Packard", "Mason Weaver","Hank Marlow ", "Bill Randa ","Houston Brooks "},
              8.4, "Action, Adventure, Fantasy"),
          new Movie("Twilight", "Catherine Hardwicke", 153,
              new String[]{"Kristen Stewart", "Robert Pattinson ", "Taylor Lautner"," Peter Facinelli ","Ashley Gree ","Billy Burke "},
              new String[]{"Bella Swan", "Edward Cullen", "Jacob Black","Carlisle Cullen ","Alice Cullen "," Charlie Swan"},
              8.2, "Romance, Fantasy, Drama"),
          new Movie("The Matrix", "The Wachowskis (Lana Wachowski and Lilly Wachowski)", 183,
              new String[]{"Keanu Reeves", "Laurence Fishburne", "Carrie-Anne Moss","Hugo Weaving ","Joe Pantoliano ","Gloria Foster "},
              new String[]{"Thomas Neo Anderson", "Morpheus", "Trinity","Agent Smith ","Cypher ","The Oracle "},
              8.7, "Science Fiction, Action"),
          new Movie("Bahubali: The Beginning", "S.S. Rajamouli", 193,
              new String[]{"Prabhas ", "Rana Daggubati", "Anushka Shetty","Tamannaah ","Ramya Krishna "," Sathyaraj"},
              new String[]{"Amarendra Baahubali and Mahendra Baahubali", "Bhallaladeva", "Maharani Devasena","Avanthika ","Sivagami Devi "," Kattappa"},
              8.0, "Epic Historical Fiction, Action"),
	    new Movie("Joker", "Todd Phillips", 210,
              new String[]{"Joaquin Phoenix ", "Robert De Niro ", "Zazie Beetz","Frances Conroy ","Brett Cullen "," Shea Whigham"},
              new String[]{"Arthur Fleck / Joker", "Murray Franklin", "Sophie Dumond","Penny Fleck ","Thomas Wayne "," Detective Burke"},
             6.0, "Psychological Thriller, Drama"),
	    new Movie("Tenet", " Christopher Nolan", 180,
              new String[]{"John David Washington  ", "Robert Pattinson", "Elizabeth Debicki ","Kenneth Branagh ","Michael Caine "," Aaron Taylor-Johnson"},
              new String[]{"The Protagonist", "Neil", "Kat", "Andrei Sator ","Sir Michael Crosby ","  Ives"},
              7.0, "Action, Sci-Fi, Thriller"),
	    new Movie("Godzilla", "Gareth Edwards", 120,
              new String[]{"Aaron Taylor-Johnson ", "Bryan Cranston", "Ken Watanabe","Elizabeth Olsen","Sally Hawkins  "},
              new String[]{"Ford Brody", "Joe Brody", "Dr. Ishiro Serizawa"," Elle Brody "," Dr. Vivienne Graham "},
              7.3, "Action, Science Fiction"),
	    new Movie("Dune", "Denis Villeneuve", 190,
              new String[]{"Timothée Chalamet ", "Rebecca Ferguson", "Oscar Isaac","Josh Brolin","Stellan Skarsgård","Dave Bautista ","Zendaya"},
              new String[]{" Paul Atreides", "Lady Jessica", "Duke Leto Atreides"," Gurney Halleck "," Baron Vladimir Harkonnen "," Glossu Rabban ","Chani "},
              9.4, " Science Fiction, Adventure"),
	};

//creating objects for theatre class
		Theatres  theatres [] = new Theatres[4];
		for(int i = 0; i < 4; ++i) {
			theatres[i] = new Theatres(theatreNames[i],bigData[i]);
		}

//creating objects for billing class
Billing billobj=new Billing();

//running a do loop for user to be able to continue booking further tickets
	do{

//prompt user for choice of theatre
		System.out.println("Theatres at your service:");

		for(int i = 0; i < 4; ++i) System.out.println((i + 1) + "] " + theatreNames[i]);

		System.out.print("Choose the Theatre you want to book at: ");

		theatreChoice = sc.nextInt();

//prompt user for choice of date
		System.out.println("\nAvailable dates for booking:");

		System.out.println("1] 16.4.24\n2] 17.4.24\n3] 18.4.24\n4] 19.4.24");

		System.out.print("Choose a suitable date: ");

		dateChoice = sc.nextInt();

//displaying the movies available on the chosen theatre and date
		theatres[theatreChoice - 1].displayTheatreMDetails(dateChoice - 1);
		sc.nextLine();
		boolean flag=false;

//repeating the prompt for movie choice until a correct choice is entered
		do {
			System.out.println("\nWhat are you Watching then?");
			System.out.print("Type in your Choice: ");
			String movieChoiceS = sc.nextLine();

			for(int k=0;k<11;k++){
				if(movieNames[k].equalsIgnoreCase(movieChoiceS)){
					movieChoice=k+1;
					flag=true;
					break;
				}
			}

			if(!flag) {
				System.out.println("Incorrect Movie Name entered! Try Again!");
			}

		}while(!flag);

//printing the movie details on user's demand
		System.out.println("\nEnter '1' to view Movie Details.\nElse, Enter 0.");
		System.out.print("Your Choice: ");
		int tempChoice=sc.nextInt();

		if(tempChoice==1) {
			movies[movieChoice-1].displayMovieDetails();
		}

//prompt user for choice of slot
		System.out.println("\nSlots Available are:");

		for(int i = 0; i < 4; i++) System.out.println((i + 1) + ": " + Slots[i]);

		System.out.print("Choose a Slot: ");
		slotChoice = sc.nextInt();
		System.out.println("\n");
//initialisations for seat booking
		 int ch;
		 int numrows = 8; 
	    	 int numcols = 10; 
	         int countg=0, counts=0, countb=0;

//creating objects for classes gold, silver and bronze respectively
		 gold goldSeating = new gold(numrows, numcols);
		 silver silverSeating = new silver(numrows, numcols);
		 bronze BronzeSeating = new bronze(numrows, numcols);

//repeating seat booking until and unless user wants to exit
		 do {
			 
	     System.out.println("Which Zone would you like to book a seat in?");
	     System.out.print("1] Gold (Rows 1-2, Col:1-10)\n2] Silver(Rows 3-5, Col:1-10)\n3] Bronze(Rows 6-8, Col:1-10)\n4] Seating Arrangement\n5] Exit\nYour Choice: ");
	     ch=sc.nextInt();
	     int n,c;
	     
	     switch(ch) {
	     case 1:
	    	 
		     
	    	 System.out.println("Give row and column:");
		     n=sc.nextInt();
		     c=sc.nextInt();
		     if(n>=1 && n<=2 && c>=1 && c<=10) {
		    	 goldSeating.bookseat(n-1,c-1);
		    	 countg++;
		    	// billobj.calculateTotalCost(theatreChoice-1,movieChoice-1,0);
		    	 }
		     else {
			    	 System.out.println("Row and column entered do not come in gold zone enter again");
			    	 System.out.println("Give row and column:");
			    	 
				     n=sc.nextInt();
				     c=sc.nextInt();
				     goldSeating.bookseat(n-1,c-1);
				     countg++;
			    	// billobj.calculateTotalCost(theatreChoice-1,movieChoice-1,0);
			 }
		     break;
	     
		case 2:
			System.out.println("Give row and column:");
		     n=sc.nextInt();
		     c=sc.nextInt();
		     
		     if(n>=3 && n<=5 && c>=1 && c<=10) {
		    	 silverSeating.bookseat(n-1,c-1);
		    	 counts++;
		    	// billobj.calculateTotalCost(theatreChoice-1,movieChoice-1,1);
		     }
		     else {
		    	 System.out.println("Row and column entered do not come in silver zone enter again");
		    	 System.out.println("Give row and column:");
		    	 
			     n=sc.nextInt();
			     c=sc.nextInt();
		    	 silverSeating.bookseat(n-1,c-1);
		    	 counts++;
		     }
		     
		     //silverSeating.displayseats();
		     break;
	    
	     case 3:
	    	 System.out.println("Give row and column:");
		     n=sc.nextInt();
		     c=sc.nextInt();
	    	 if(n>=6 && n<=8 && c>=1 && c<=10) {
		     BronzeSeating.bookseat(n-1,c-1);
		     countb++;
	    //	 billobj.calculateTotalCost(theatreChoice-1,movieChoice-1,2);

	    	 }
	    	 else {
		    	 System.out.println("Row and column entered do not come in bronze zone enter again");
		    	 System.out.println("Give row and column:");
		    	 
			     n=sc.nextInt();
			     c=sc.nextInt();
		    	 BronzeSeating.bookseat(n-1,c-1);
			     countb++;
		    	//.calculateTotalCost(theatreChoice-1,movieChoice-1,2);
		     }
		     //BronzeSeating.displayseats();
		     break;
	     case 4:
	    	 System.out.println("Gold:-");
			 goldSeating.displayseats(0,2,0,10);	 
			 System.out.println("Silver:-");
			 silverSeating.displayseats(2,5,0,10);	 
			 System.out.println("Bronze:-");
			 BronzeSeating.displayseats(5,8,0,10);
			 break;
	    	 
	    	 
	     case 5:
	    	 break;
	    	 
	     default:
	    	 System.out.println("Invalid choice");
	    	 break;
	     } 
	     System.out.println("\n");
		 }while(ch!=5);
  	 billobj.calculateTotalCost(theatreChoice-1,movieChoice-1,countg,counts,countb);
		 System.out.println("Enter '1' to further continue booking.");
		 rerunChoice=sc.nextInt();
		    }while(rerunChoice==1);
		
		       
	}
}

	  

abstract class seats{
	boolean[][] seats;
	String seatType;
	public seats(int numrows, int numcol) {
	}
	public void seatingarr(int numrows,int numcol){
		seats = new boolean[numrows][numcol];
	}
	void displayseats(int sr,int r,int sc,int co ){
		
		for(int i=sr;i< r;i++) {
			for(int j=sc;j<co;j++) {
				
				if(seats[i][j]) {
					System.out.print("0\t");
				}
				else {
					System.out.print("1\t");
				}
				
				
			}
			System.out.println("\n");
		}
	}
	public abstract void bookseat(int row, int col);
}
class gold extends seats{
	public gold(int numrows, int numcol) {
		super(numrows, numcol);
		seatingarr(numrows, numcol);
		seatType="Gold";
		
	}
	public void bookseat(int row, int col) {
		
		 
		 if (seats[row][col]) {
	            System.out.println("Gold seat already booked. Please select another seat.");
	        } 
		 else {
	            seats[row][col] = true;
	            System.out.println("Gold seat booked !");
	        }
		 if (row < 0 || row >= seats.length || col < 0 || col >= seats[0].length) {
	            System.out.println("Invalid row or column number. Please try again.");
	            return;
	        }
	}
}
class silver extends seats{
	 public silver(int numrows, int numcol) {
	        super(numrows, numcol);
	        seatingarr(numrows, numcol);
	        seatType = "Silver";
	    }
	public void bookseat(int row, int col) {
		if (row < 0 || row >= seats.length || col < 0 || col >= seats[0].length) {
          System.out.println("Invalid row or column number. Please try again.");
          return;
      }

      if (seats[row][col]) {
          System.out.println("Silver seat already booked. Please select another seat.");
      } else {
          seats[row][col] = true;
          System.out.println("Silver seat booked!");
      }
	}
}
class bronze extends seats{
	 public bronze(int numrows, int numcol) {
	        super(numrows, numcol);
	        seatingarr(numrows, numcol);
	        seatType = "Bronze";
	    }
	public void bookseat(int row, int col) {
		if (row < 0 || row >= seats.length || col < 0 || col >= seats[0].length) {
       System.out.println("Invalid row or column number. Please try again.");
       return;
   }

   if (seats[row][col]) {
       System.out.println("Bronze seat already booked. Please select another seat.");
   } else {
       seats[row][col] = true;
       System.out.println("Bronze seat booked!");
   }
	}
	
}
		   


class Billing {
  // Define prices for theaters, movies, and seat types
  private static final String theaters[] = {"INOX", "Mukta Theatres", "City Pride", "AURUM"};
  private static final String movies[] = {"Harry Potter and the Philosopher's Stone",
          "Dilwale Dulhania Le Jayenge",
          "1920 London",
          "Kong: Skull Island",
          "Twilight",
          "The Matrix",
          "Bahubali: The Beginning",
          "Joker",
          "Tenet",
          "Godzilla",
          "Dune"};
  private static final String[] seatTypes = {"Gold", "Silver", "Bronze"};
  private static final double[] theaterPrices = {55, 65, 80, 60};  // Prices for AURUM

  private static final double[] moviePrices = {50.0, 60.0, 55.0, 65.0, 55.0, 65.0, 60.0, 55.0, 70.0, 65.0, 70.0};
  private static final double[] seatPrices = {100.0, 80.0, 60.0};
  double subtotal = 0;

  public void calculateTotalCost(int theaterIndex, int movieIndex, int countg, int counts, int countb) {
      double theaterPrice = theaterPrices[theaterIndex];
      double moviePrice = moviePrices[movieIndex];

      // Print the bill
      printBill(theaterIndex, movieIndex, theaterPrice, moviePrice, seatTypes, seatPrices, countg, counts, countb);

      // Return total cost including tax
  }

  // Method to print the bill
  private void printBill(int theaterIndex, int movieIndex, double theaterPrice, double moviePrice, String[] seatTypes, double[] seatPrices,
          int countg, int counts, int countb) {
DecimalFormat decimalFormat = new DecimalFormat("#.##");
String theaterName = theaters[theaterIndex];
String movieName = movies[movieIndex];
double tax = 0; // Assuming 18% GST
double totalCost = 0;

double gtotal = 0, stotal = 0, btotal = 0;
int boxWidth = 60; // Width of the box

// Print the top border of the box
for (int i = 0; i < boxWidth; i++) {
System.out.print("*");
}
System.out.println(); // Move to the next line

System.out.println("----------------------- MOVIE - BILL -----------------------");
System.out.println("************************************************************");

// Print the details inside the box
System.out.println("Theater: " + theaterName);
System.out.println("Movie: " + movieName);
System.out.println();

// Print details for each seat type
if (countg > 0) {
System.out.println("Seat Type: " + seatTypes[0]);
System.out.println("\t" + countg + "\t" + decimalFormat.format(gtotal = (theaterPrice + moviePrice + seatPrices[0])));
System.out.println("-----------------------------------------------------------");
}
if (counts > 0) {
System.out.println("Seat Type: " + seatTypes[1]);
System.out.println("\t" + counts + "\t" + decimalFormat.format(stotal = (theaterPrice + moviePrice + seatPrices[1])));
System.out.println("-----------------------------------------------------------");
}
if (countb > 0) {
System.out.println("Seat Type: " + seatTypes[2]);
System.out.println("\t" + countb + "\t" + decimalFormat.format(btotal = ((theaterPrice + moviePrice + seatPrices[2]))));
System.out.println("-----------------------------------------------------------");
}

System.out.println();
// Calculate subtotal, tax, and total cost
subtotal = ((stotal * counts) + (gtotal * countg) + (btotal * countb));
tax = (subtotal * 0.18); // 18% GST
totalCost = subtotal + tax;

// Print subtotal, tax, and total cost
System.out.println("Subtotal     : ₹ " + decimalFormat.format(subtotal));
System.out.println("Tax (GST 18%): ₹ " + decimalFormat.format(tax));
System.out.println("Total Cost   : ₹ " + decimalFormat.format(totalCost));
System.out.println();

// Print the bottom border of the box
for (int i = 0; i < boxWidth; i++) {
System.out.print("*");
}
System.out.println(); // Move to the next line
}

}
